{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","MatSelectSearchClearDirective","Directive","selector","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","matFormField","this","placeholderLabel","type","noEntriesFoundLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAll","EventEmitter","onChange","_","onTouched","overlayClassSet","change","_onDestroy","Subject","prototype","_value","ngOnInit","_this","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","openedChange","pipe","delay","takeUntil","subscribe","opened","updateInputWidth","_focus","_reset","take","_keyManager","adjustScrollTopToFitActiveOptionIntoView","console","log","_options","options","changes","keyManager","panelOpen","setTimeout","setFirstItemActive","_noEntriesFound","remove","detectChanges","initMultipleHandling","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","next","complete","ngAfterViewInit","setOverlayClass","markForCheck","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","A","Z","ZERO","NINE","SPACE","HOME","END","stopPropagation","_handleKeyup","UP_ARROW","DOWN_ARROW","ariaActiveDescendantId_1","_getAriaActiveDescendant","index","toArray","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","getOptionsLengthOffset","writeValue","value","onInputChange","initMultiSelectedValues","onBlur","registerOnChange","fn","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","overlayClasses","overlayDir","attach","overlayElement","element","parentElement","contains","forEach","overlayClass","valueChange","values","restoreSelectedValues_1","previousSelectedValues","optionValues_1","map","option","previousValue","indexOf","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","SELECT_PANEL_MAX_HEIGHT","indexOfFirstVisibleOption","round","panelElement","style","width","clientWidth","first","getBoundingClientRect","height","filter","selected","MatSelect","Inject","args","ChangeDetectorRef","ViewportRuler","MatOption","Optional","LiveAnnouncer","MatFormField","tslib_1.__decorate","Input","Output","ViewChild","read","ElementRef","static","ContentChild","HostBinding","MatSelectSearchComponent_1","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","tslib_1.__param","NgxMatSelectSearchModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n/**\r\n * Directive for providing a custom clear-icon.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n * </ngx-mat-select-search>\r\n */\r\n@Directive({\r\n    selector: '[ngxMatSelectSearchClear]'\r\n})\r\nexport class MatSelectSearchClearDirective {}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\r\n  ViewChild,\r\n  ContentChild, Optional, HostBinding, Output\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MatOption, _countGroupLabelsBeforeOption } from '@angular/material/core';\r\nimport { MatSelect, SELECT_PANEL_MAX_HEIGHT } from '@angular/material/select';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport {\r\n  A,\r\n  Z,\r\n  ZERO,\r\n  NINE,\r\n  SPACE, END, HOME, UP_ARROW, DOWN_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Subject } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n\r\n/* tslint:disable:member-ordering component-selector */\r\n/**\r\n * Component providing an input field for searching MatSelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatSelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-select-search',\r\n  templateUrl: './mat-select-search.component.html',\r\n  styleUrls: ['./mat-select-search.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectSearchComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\r\n\r\n  /** Label of the search placeholder */\r\n  @Input() placeholderLabel = 'Suche';\r\n\r\n  /** Type of the search input field */\r\n  @Input() type = 'text';\r\n\r\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\r\n\r\n  /**\r\n   *  Text that is appended to the currently active item label announced by screen readers, informing the user of the current index, value and total options.\r\n   *  eg: Bank R (Germany) 1 of 6\r\n  */\r\n  @Input() indexAndLengthScreenReaderText = ' of ';\r\n\r\n  /**\r\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n    */\r\n  @Input() clearSearchInput = true;\r\n\r\n  /** Whether to show the search-in-progress indicator */\r\n  @Input() searching = false;\r\n\r\n  /** Disables initial focusing of the input field */\r\n  @Input() disableInitialFocus = false;\r\n\r\n  /**\r\n   * Prevents home / end key being propagated to mat-select,\r\n   * allowing to move the cursor within the search input instead of navigating the options\r\n   */\r\n  @Input() preventHomeEndKeyPropagation = false;\r\n\r\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n  @Input() disableScrollToActiveOnOptionsChanged = false;\r\n\r\n  /** Adds 508 screen reader support for search box */\r\n  @Input() ariaLabel = 'dropdown search';\r\n\r\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n  @Input() showToggleAllCheckbox = false;\r\n\r\n  /** select all checkbox checked state */\r\n  @Input() toggleAllCheckboxChecked = false;\r\n\r\n  /** select all checkbox indeterminate state */\r\n  @Input() toggleAllCheckboxIndeterminate = false;\r\n\r\n  /** Output emitter to send to parent component with the toggle all boolean */\r\n  @Output() toggleAll = new EventEmitter<boolean>();\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\r\n\r\n  /** Reference to custom search input clear icon */\r\n  @ContentChild(MatSelectSearchClearDirective, {static: false}) clearIcon: MatSelectSearchClearDirective;\r\n\r\n  @HostBinding('class.mat-select-search-inside-mat-option')\r\n  get isInsideMatOption(): boolean {\r\n    return !!this.matOption;\r\n  }\r\n\r\n  /** Current search value */\r\n  get value(): string {\r\n    return this._value;\r\n  }\r\n  private _value: string;\r\n\r\n  onChange: Function = (_: any) => {};\r\n  onTouched: Function = (_: any) => {};\r\n\r\n  /** Reference to the MatSelect options */\r\n  public _options: QueryList<MatOption>;\r\n\r\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\r\n  private previousSelectedValues: any[];\r\n\r\n  /** Whether the backdrop class has been set */\r\n  private overlayClassSet = false;\r\n\r\n  /** Event that emits when the current value changes */\r\n  private change = new EventEmitter<string>();\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\r\n    public changeDetectorRef: ChangeDetectorRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\r\n    private liveAnnouncer: LiveAnnouncer,\r\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\r\n  ) {\r\n\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set custom panel class\r\n    const panelClass = 'mat-select-search-panel';\r\n    if (this.matSelect.panelClass) {\r\n      if (Array.isArray(this.matSelect.panelClass)) {\r\n        (<string[]>this.matSelect.panelClass).push(panelClass);\r\n      } else if (typeof this.matSelect.panelClass === 'string') {\r\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\r\n      } else if (typeof this.matSelect.panelClass === 'object') {\r\n        this.matSelect.panelClass[panelClass] = true;\r\n      }\r\n    } else {\r\n      this.matSelect.panelClass = panelClass;\r\n    }\r\n\r\n    // set custom mat-option class if the component was placed inside a mat-option\r\n    if (this.matOption) {\r\n      this.matOption.disabled = true;\r\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\r\n    }\r\n\r\n    // when the select dropdown panel is opened or closed\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        delay(1),\r\n        takeUntil(this._onDestroy)\r\n      )\r\n      .subscribe((opened) => {\r\n        if (opened) {\r\n          this.updateInputWidth();\r\n          // focus the search field when opening\r\n          if (!this.disableInitialFocus) {\r\n            this._focus();\r\n          }\r\n        } else {\r\n          // clear it when closing\r\n          if (this.clearSearchInput) {\r\n            this._reset();\r\n          }\r\n        }\r\n      });\r\n\r\n    // set the first item active after the options changed\r\n    this.matSelect.openedChange\r\n      .pipe(take(1))\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect._keyManager) {\r\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\r\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\r\n        } else {\r\n          console.log('_keyManager was not initialized.');\r\n        }\r\n\r\n        this._options = this.matSelect.options;\r\n        this._options.changes\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => {\r\n            const keyManager = this.matSelect._keyManager;\r\n            if (keyManager && this.matSelect.panelOpen) {\r\n\r\n              // avoid \"expression has been changed\" error\r\n              setTimeout(() => {\r\n                // set first item active and input width\r\n                keyManager.setFirstItemActive();\r\n                // wait for panel width changes\r\n                setTimeout(() => {\r\n                  this.updateInputWidth();\r\n                });\r\n\r\n                // set no entries found class on mat option\r\n                if (this.matOption) {\r\n                  if (this._noEntriesFound()) {\r\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\r\n                  } else {\r\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n                  }\r\n                }\r\n\r\n                if (!this.disableScrollToActiveOnOptionsChanged) {\r\n                  this.adjustScrollTopToFitActiveOptionIntoView();\r\n                }\r\n\r\n              }, 1);\r\n\r\n            }\r\n          });\r\n      });\r\n\r\n    // detect changes when the input changes\r\n    this.change\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.changeDetectorRef.detectChanges();\r\n      });\r\n\r\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\r\n    this._viewportRuler.change()\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect.panelOpen) {\r\n          this.updateInputWidth();\r\n        }\r\n      });\r\n\r\n    this.initMultipleHandling();\r\n  }\r\n\r\n  _emitSelectAllBooleanToParent(state: boolean) {\r\n    this.toggleAll.emit(state);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setOverlayClass();\r\n    });\r\n\r\n    // update view when available options change\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._onDestroy)\r\n      ).subscribe(() => {\r\n        this.matSelect.options.changes\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => {\r\n            this.changeDetectorRef.markForCheck();\r\n          });\r\n      });\r\n  }\r\n\r\n  _isToggleAllCheckboxVisible(): boolean {\r\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\r\n  }\r\n\r\n  /**\r\n   * Handles the key down event with MatSelect.\r\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n   * @param event\r\n   */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\r\n    if ((event.key && event.key.length === 1) ||\r\n      (event.keyCode >= A && event.keyCode <= Z) ||\r\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\r\n      (event.keyCode === SPACE)\r\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\r\n    ) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the key up event with MatSelect.\r\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n   */\r\n  _handleKeyup(event: KeyboardEvent) {\r\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\r\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\r\n      if (index !== -1) {\r\n        const activeDescendant = this._options.toArray()[index];\r\n        this.liveAnnouncer.announce(\r\n          activeDescendant.viewValue + ' '\r\n          + this.getAriaIndex(index)\r\n          + this.indexAndLengthScreenReaderText\r\n          + this.getAriaLength()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the current option, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\r\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\r\n   */\r\n  getAriaIndex(optionIndex: number): number {\r\n    if (this.getOptionsLengthOffset() === 0) {\r\n      return optionIndex + 1;\r\n    }\r\n    return optionIndex;\r\n  }\r\n\r\n  /**\r\n   * Calculate the length of the options, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\r\n   *    Case 2 [1, 2, 3] will have length of options.length.\r\n   */\r\n  getAriaLength(): number {\r\n    return this._options.toArray().length - this.getOptionsLengthOffset();\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    const valueChanged = value !== this._value;\r\n    if (valueChanged) {\r\n      this._value = value;\r\n      this.change.emit(value);\r\n    }\r\n  }\r\n\r\n  onInputChange(value) {\r\n    const valueChanged = value !== this._value;\r\n    if (valueChanged) {\r\n      this.initMultiSelectedValues();\r\n      this._value = value;\r\n      this.onChange(value);\r\n      this.change.emit(value);\r\n    }\r\n  }\r\n\r\n  onBlur(value: string) {\r\n    this.writeValue(value);\r\n    this.onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Focuses the search input field\r\n   */\r\n  public _focus() {\r\n    if (!this.searchSelectInput || !this.matSelect.panel) {\r\n      return;\r\n    }\r\n    // save and restore scrollTop of panel, since it will be reset by focus()\r\n    // note: this is hacky\r\n    const panel = this.matSelect.panel.nativeElement;\r\n    const scrollTop = panel.scrollTop;\r\n\r\n    // focus\r\n    this.searchSelectInput.nativeElement.focus();\r\n\r\n    panel.scrollTop = scrollTop;\r\n  }\r\n\r\n  /**\r\n   * Resets the current search value\r\n   * @param focus whether to focus after resetting\r\n   */\r\n  public _reset(focus?: boolean) {\r\n    if (!this.searchSelectInput) {\r\n      return;\r\n    }\r\n    this.searchSelectInput.nativeElement.value = '';\r\n    this.onInputChange('');\r\n    if (this.matOption && !focus) {\r\n      // remove no entries found class on mat option\r\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n    }\r\n    if (focus) {\r\n      this._focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay class  to correct offsetY\r\n   * so that the selected option is at the position of the select box when opening\r\n   */\r\n  private setOverlayClass() {\r\n    if (this.overlayClassSet) {\r\n      return;\r\n    }\r\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\r\n\r\n    if (!this.matOption) {\r\n      // add offset to panel if component is not placed inside mat-option\r\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\r\n    }\r\n\r\n    this.matSelect.overlayDir.attach\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // note: this is hacky, but currently there is no better way to do this\r\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\r\n        let overlayElement: HTMLElement;\r\n        while (element = element.parentElement) {\r\n          if (element.classList.contains('cdk-overlay-pane')) {\r\n            overlayElement = element;\r\n            break;\r\n          }\r\n        }\r\n        if (overlayElement) {\r\n          overlayClasses.forEach(overlayClass => {\r\n            overlayElement.classList.add(overlayClass);\r\n          });\r\n        }\r\n      });\r\n\r\n    this.overlayClassSet = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes handling <mat-select [multiple]=\"true\">\r\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n   */\r\n  private initMultipleHandling() {\r\n    // if <mat-select [multiple]=\"true\">\r\n    // store previously selected values and restore them when they are deselected\r\n    // because the option is not available while we are currently filtering\r\n    this.matSelect.valueChange\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe((values) => {\r\n        if (this.matSelect.multiple) {\r\n          let restoreSelectedValues = false;\r\n          if (this._value && this._value.length\r\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\r\n            if (!values || !Array.isArray(values)) {\r\n              values = [];\r\n            }\r\n            const optionValues = this.matSelect.options.map(option => option.value);\r\n            this.previousSelectedValues.forEach(previousValue => {\r\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\r\n                // if a value that was selected before is deselected and not found in the options, it was deselected\r\n                // due to the filtering, so we restore it.\r\n                values.push(previousValue);\r\n                restoreSelectedValues = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (restoreSelectedValues) {\r\n            this.matSelect._onChange(values);\r\n          }\r\n\r\n          this.previousSelectedValues = values;\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Scrolls the currently active option into the view if it is not yet visible.\r\n   */\r\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\r\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\r\n      const matOptionHeight = this.getMatOptionHeight();\r\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\r\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\r\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\r\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\r\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\r\n\r\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight\r\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\r\n\r\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\r\n\r\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\r\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n   *  And support all Operation Systems\r\n   */\r\n  public updateInputWidth() {\r\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\r\n      return;\r\n    }\r\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\r\n    let panelElement: HTMLElement;\r\n    while (element = element.parentElement) {\r\n      if (element.classList.contains('mat-select-panel')) {\r\n        panelElement = element;\r\n        break;\r\n      }\r\n    }\r\n    if (panelElement) {\r\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\r\n    }\r\n  }\r\n\r\n  private getMatOptionHeight(): number {\r\n    if (this.matSelect.options.length > 0) {\r\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\r\n   */\r\n  initMultiSelectedValues() {\r\n    if (this.matSelect.multiple && !this._value) {\r\n      this.previousSelectedValues = this.matSelect.options\r\n        .filter(option => option.selected)\r\n        .map(option => option.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the \"no entries found\" message should be displayed\r\n   */\r\n  public _noEntriesFound(): boolean {\r\n    if (!this._options) {\r\n      return;\r\n    }\r\n\r\n    return this.noEntriesFoundLabel && this.value && this._options.length === this.getOptionsLengthOffset();\r\n  }\r\n\r\n  /**\r\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\r\n   */\r\n  private getOptionsLengthOffset(): number {\r\n    if (this.matOption) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n\r\nexport const MatSelectSearchVersion = '2.1.1';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  declarations: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ],\r\n  exports: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ]\r\n})\r\nexport class NgxMatSelectSearchModule { }\r\n"]}