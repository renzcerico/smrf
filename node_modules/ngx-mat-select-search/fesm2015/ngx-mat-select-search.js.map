{"version":3,"file":"ngx-mat-select-search.js","sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts","ng://ngx-mat-select-search/ngx-mat-select-search.ts"],"sourcesContent":["import { Directive } from '@angular/core';\r\n\r\n/**\r\n * Directive for providing a custom clear-icon.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n * </ngx-mat-select-search>\r\n */\r\n@Directive({\r\n    selector: '[ngxMatSelectSearchClear]'\r\n})\r\nexport class MatSelectSearchClearDirective {}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\r\n  ViewChild,\r\n  ContentChild, Optional, HostBinding, Output\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MatOption, _countGroupLabelsBeforeOption } from '@angular/material/core';\r\nimport { MatSelect, SELECT_PANEL_MAX_HEIGHT } from '@angular/material/select';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport {\r\n  A,\r\n  Z,\r\n  ZERO,\r\n  NINE,\r\n  SPACE, END, HOME, UP_ARROW, DOWN_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Subject } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n\r\n/* tslint:disable:member-ordering component-selector */\r\n/**\r\n * Component providing an input field for searching MatSelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatSelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-select-search',\r\n  templateUrl: './mat-select-search.component.html',\r\n  styleUrls: ['./mat-select-search.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectSearchComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\r\n\r\n  /** Label of the search placeholder */\r\n  @Input() placeholderLabel = 'Suche';\r\n\r\n  /** Type of the search input field */\r\n  @Input() type = 'text';\r\n\r\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\r\n\r\n  /**\r\n   *  Text that is appended to the currently active item label announced by screen readers, informing the user of the current index, value and total options.\r\n   *  eg: Bank R (Germany) 1 of 6\r\n  */\r\n  @Input() indexAndLengthScreenReaderText = ' of ';\r\n\r\n  /**\r\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n    */\r\n  @Input() clearSearchInput = true;\r\n\r\n  /** Whether to show the search-in-progress indicator */\r\n  @Input() searching = false;\r\n\r\n  /** Disables initial focusing of the input field */\r\n  @Input() disableInitialFocus = false;\r\n\r\n  /**\r\n   * Prevents home / end key being propagated to mat-select,\r\n   * allowing to move the cursor within the search input instead of navigating the options\r\n   */\r\n  @Input() preventHomeEndKeyPropagation = false;\r\n\r\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n  @Input() disableScrollToActiveOnOptionsChanged = false;\r\n\r\n  /** Adds 508 screen reader support for search box */\r\n  @Input() ariaLabel = 'dropdown search';\r\n\r\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n  @Input() showToggleAllCheckbox = false;\r\n\r\n  /** select all checkbox checked state */\r\n  @Input() toggleAllCheckboxChecked = false;\r\n\r\n  /** select all checkbox indeterminate state */\r\n  @Input() toggleAllCheckboxIndeterminate = false;\r\n\r\n  /** Output emitter to send to parent component with the toggle all boolean */\r\n  @Output() toggleAll = new EventEmitter<boolean>();\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\r\n\r\n  /** Reference to custom search input clear icon */\r\n  @ContentChild(MatSelectSearchClearDirective, {static: false}) clearIcon: MatSelectSearchClearDirective;\r\n\r\n  @HostBinding('class.mat-select-search-inside-mat-option')\r\n  get isInsideMatOption(): boolean {\r\n    return !!this.matOption;\r\n  }\r\n\r\n  /** Current search value */\r\n  get value(): string {\r\n    return this._value;\r\n  }\r\n  private _value: string;\r\n\r\n  onChange: Function = (_: any) => {};\r\n  onTouched: Function = (_: any) => {};\r\n\r\n  /** Reference to the MatSelect options */\r\n  public _options: QueryList<MatOption>;\r\n\r\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\r\n  private previousSelectedValues: any[];\r\n\r\n  /** Whether the backdrop class has been set */\r\n  private overlayClassSet = false;\r\n\r\n  /** Event that emits when the current value changes */\r\n  private change = new EventEmitter<string>();\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\r\n    public changeDetectorRef: ChangeDetectorRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\r\n    private liveAnnouncer: LiveAnnouncer,\r\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\r\n  ) {\r\n\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set custom panel class\r\n    const panelClass = 'mat-select-search-panel';\r\n    if (this.matSelect.panelClass) {\r\n      if (Array.isArray(this.matSelect.panelClass)) {\r\n        (<string[]>this.matSelect.panelClass).push(panelClass);\r\n      } else if (typeof this.matSelect.panelClass === 'string') {\r\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\r\n      } else if (typeof this.matSelect.panelClass === 'object') {\r\n        this.matSelect.panelClass[panelClass] = true;\r\n      }\r\n    } else {\r\n      this.matSelect.panelClass = panelClass;\r\n    }\r\n\r\n    // set custom mat-option class if the component was placed inside a mat-option\r\n    if (this.matOption) {\r\n      this.matOption.disabled = true;\r\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\r\n    }\r\n\r\n    // when the select dropdown panel is opened or closed\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        delay(1),\r\n        takeUntil(this._onDestroy)\r\n      )\r\n      .subscribe((opened) => {\r\n        if (opened) {\r\n          this.updateInputWidth();\r\n          // focus the search field when opening\r\n          if (!this.disableInitialFocus) {\r\n            this._focus();\r\n          }\r\n        } else {\r\n          // clear it when closing\r\n          if (this.clearSearchInput) {\r\n            this._reset();\r\n          }\r\n        }\r\n      });\r\n\r\n    // set the first item active after the options changed\r\n    this.matSelect.openedChange\r\n      .pipe(take(1))\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect._keyManager) {\r\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\r\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\r\n        } else {\r\n          console.log('_keyManager was not initialized.');\r\n        }\r\n\r\n        this._options = this.matSelect.options;\r\n        this._options.changes\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => {\r\n            const keyManager = this.matSelect._keyManager;\r\n            if (keyManager && this.matSelect.panelOpen) {\r\n\r\n              // avoid \"expression has been changed\" error\r\n              setTimeout(() => {\r\n                // set first item active and input width\r\n                keyManager.setFirstItemActive();\r\n                // wait for panel width changes\r\n                setTimeout(() => {\r\n                  this.updateInputWidth();\r\n                });\r\n\r\n                // set no entries found class on mat option\r\n                if (this.matOption) {\r\n                  if (this._noEntriesFound()) {\r\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\r\n                  } else {\r\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n                  }\r\n                }\r\n\r\n                if (!this.disableScrollToActiveOnOptionsChanged) {\r\n                  this.adjustScrollTopToFitActiveOptionIntoView();\r\n                }\r\n\r\n              }, 1);\r\n\r\n            }\r\n          });\r\n      });\r\n\r\n    // detect changes when the input changes\r\n    this.change\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.changeDetectorRef.detectChanges();\r\n      });\r\n\r\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\r\n    this._viewportRuler.change()\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect.panelOpen) {\r\n          this.updateInputWidth();\r\n        }\r\n      });\r\n\r\n    this.initMultipleHandling();\r\n  }\r\n\r\n  _emitSelectAllBooleanToParent(state: boolean) {\r\n    this.toggleAll.emit(state);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setOverlayClass();\r\n    });\r\n\r\n    // update view when available options change\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._onDestroy)\r\n      ).subscribe(() => {\r\n        this.matSelect.options.changes\r\n          .pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => {\r\n            this.changeDetectorRef.markForCheck();\r\n          });\r\n      });\r\n  }\r\n\r\n  _isToggleAllCheckboxVisible(): boolean {\r\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\r\n  }\r\n\r\n  /**\r\n   * Handles the key down event with MatSelect.\r\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n   * @param event\r\n   */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\r\n    if ((event.key && event.key.length === 1) ||\r\n      (event.keyCode >= A && event.keyCode <= Z) ||\r\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\r\n      (event.keyCode === SPACE)\r\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\r\n    ) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the key up event with MatSelect.\r\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n   */\r\n  _handleKeyup(event: KeyboardEvent) {\r\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\r\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\r\n      if (index !== -1) {\r\n        const activeDescendant = this._options.toArray()[index];\r\n        this.liveAnnouncer.announce(\r\n          activeDescendant.viewValue + ' '\r\n          + this.getAriaIndex(index)\r\n          + this.indexAndLengthScreenReaderText\r\n          + this.getAriaLength()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the current option, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\r\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\r\n   */\r\n  getAriaIndex(optionIndex: number): number {\r\n    if (this.getOptionsLengthOffset() === 0) {\r\n      return optionIndex + 1;\r\n    }\r\n    return optionIndex;\r\n  }\r\n\r\n  /**\r\n   * Calculate the length of the options, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\r\n   *    Case 2 [1, 2, 3] will have length of options.length.\r\n   */\r\n  getAriaLength(): number {\r\n    return this._options.toArray().length - this.getOptionsLengthOffset();\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    const valueChanged = value !== this._value;\r\n    if (valueChanged) {\r\n      this._value = value;\r\n      this.change.emit(value);\r\n    }\r\n  }\r\n\r\n  onInputChange(value) {\r\n    const valueChanged = value !== this._value;\r\n    if (valueChanged) {\r\n      this.initMultiSelectedValues();\r\n      this._value = value;\r\n      this.onChange(value);\r\n      this.change.emit(value);\r\n    }\r\n  }\r\n\r\n  onBlur(value: string) {\r\n    this.writeValue(value);\r\n    this.onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: Function) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Focuses the search input field\r\n   */\r\n  public _focus() {\r\n    if (!this.searchSelectInput || !this.matSelect.panel) {\r\n      return;\r\n    }\r\n    // save and restore scrollTop of panel, since it will be reset by focus()\r\n    // note: this is hacky\r\n    const panel = this.matSelect.panel.nativeElement;\r\n    const scrollTop = panel.scrollTop;\r\n\r\n    // focus\r\n    this.searchSelectInput.nativeElement.focus();\r\n\r\n    panel.scrollTop = scrollTop;\r\n  }\r\n\r\n  /**\r\n   * Resets the current search value\r\n   * @param focus whether to focus after resetting\r\n   */\r\n  public _reset(focus?: boolean) {\r\n    if (!this.searchSelectInput) {\r\n      return;\r\n    }\r\n    this.searchSelectInput.nativeElement.value = '';\r\n    this.onInputChange('');\r\n    if (this.matOption && !focus) {\r\n      // remove no entries found class on mat option\r\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n    }\r\n    if (focus) {\r\n      this._focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the overlay class  to correct offsetY\r\n   * so that the selected option is at the position of the select box when opening\r\n   */\r\n  private setOverlayClass() {\r\n    if (this.overlayClassSet) {\r\n      return;\r\n    }\r\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\r\n\r\n    if (!this.matOption) {\r\n      // add offset to panel if component is not placed inside mat-option\r\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\r\n    }\r\n\r\n    this.matSelect.overlayDir.attach\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // note: this is hacky, but currently there is no better way to do this\r\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\r\n        let overlayElement: HTMLElement;\r\n        while (element = element.parentElement) {\r\n          if (element.classList.contains('cdk-overlay-pane')) {\r\n            overlayElement = element;\r\n            break;\r\n          }\r\n        }\r\n        if (overlayElement) {\r\n          overlayClasses.forEach(overlayClass => {\r\n            overlayElement.classList.add(overlayClass);\r\n          });\r\n        }\r\n      });\r\n\r\n    this.overlayClassSet = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes handling <mat-select [multiple]=\"true\">\r\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n   */\r\n  private initMultipleHandling() {\r\n    // if <mat-select [multiple]=\"true\">\r\n    // store previously selected values and restore them when they are deselected\r\n    // because the option is not available while we are currently filtering\r\n    this.matSelect.valueChange\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe((values) => {\r\n        if (this.matSelect.multiple) {\r\n          let restoreSelectedValues = false;\r\n          if (this._value && this._value.length\r\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\r\n            if (!values || !Array.isArray(values)) {\r\n              values = [];\r\n            }\r\n            const optionValues = this.matSelect.options.map(option => option.value);\r\n            this.previousSelectedValues.forEach(previousValue => {\r\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\r\n                // if a value that was selected before is deselected and not found in the options, it was deselected\r\n                // due to the filtering, so we restore it.\r\n                values.push(previousValue);\r\n                restoreSelectedValues = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (restoreSelectedValues) {\r\n            this.matSelect._onChange(values);\r\n          }\r\n\r\n          this.previousSelectedValues = values;\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Scrolls the currently active option into the view if it is not yet visible.\r\n   */\r\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\r\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\r\n      const matOptionHeight = this.getMatOptionHeight();\r\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\r\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\r\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\r\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\r\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\r\n\r\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight\r\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\r\n\r\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\r\n\r\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\r\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n   *  And support all Operation Systems\r\n   */\r\n  public updateInputWidth() {\r\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\r\n      return;\r\n    }\r\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\r\n    let panelElement: HTMLElement;\r\n    while (element = element.parentElement) {\r\n      if (element.classList.contains('mat-select-panel')) {\r\n        panelElement = element;\r\n        break;\r\n      }\r\n    }\r\n    if (panelElement) {\r\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\r\n    }\r\n  }\r\n\r\n  private getMatOptionHeight(): number {\r\n    if (this.matSelect.options.length > 0) {\r\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\r\n   */\r\n  initMultiSelectedValues() {\r\n    if (this.matSelect.multiple && !this._value) {\r\n      this.previousSelectedValues = this.matSelect.options\r\n        .filter(option => option.selected)\r\n        .map(option => option.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the \"no entries found\" message should be displayed\r\n   */\r\n  public _noEntriesFound(): boolean {\r\n    if (!this._options) {\r\n      return;\r\n    }\r\n\r\n    return this.noEntriesFoundLabel && this.value && this._options.length === this.getOptionsLengthOffset();\r\n  }\r\n\r\n  /**\r\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\r\n   */\r\n  private getOptionsLengthOffset(): number {\r\n    if (this.matOption) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n\r\nexport const MatSelectSearchVersion = '2.1.1';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  declarations: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ],\r\n  exports: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ]\r\n})\r\nexport class NgxMatSelectSearchModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MatSelectSearchClearDirective as Éµa} from './mat-select-search-clear.directive';"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}